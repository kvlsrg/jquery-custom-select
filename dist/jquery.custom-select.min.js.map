{"version":3,"sources":["../jquery.custom-select.js"],"names":["CustomSelect","$","fn","options","this","each","createOptionsArray","optionsArray","$selectOptions","i","option","el","text","trim","push","hideDropdown","$customSelect","removeClass","customSelectActiveModifier","$dropdown","slideUp","defaults","transition","hideCallback","call","window","off","windowEventHandler","$customSelectValue","setDropdownToggle","keyboard","$dropdownOptions","blur","keyboardHandler","autocomplete","show","$input","val","$optionWrap","scrollTop","one","windowEvent","document","documentElement","addClass","slideDown","showCallback","on","index","event","$target","target","parents","is","visibleOptions","dropdownOptions","keyCode","preventDefault","find","eq","length","focus","trigger","$select","block","includeValue","modifier","placeholder","extend","hide","after","customSelect","dropdownOptionHtml","next","html","attr","append","cssClass","$currentOption","data","wrapAll","choice","prop","splice","$option","$this","originalEvent","query","setTimeout","match","toLowerCase","indexOf","toggle"],"mappings":"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","sourcesContent":["import $ from 'jquery';\r\n\r\n/*!\r\n * Custom Select jQuery Plugin\r\n */\r\n\r\nconst CustomSelect = (($) => {\r\n\r\n  /**\r\n   * Custom Select\r\n   *\r\n   * Creates custom dropdown instead of default `<select>`\r\n   *\r\n   * @param {Object} [options] - Settings object\r\n   * @param {boolean} [options.autocomplete=false] - Adds input to filter options\r\n   * @param {string} [options.block=custom-select] - Class name (BEM block name)\r\n   * @param {Function} [options.hideCallback=false] - Fires after dropdown closes\r\n   * @param {boolean} [options.includeValue=false] - Shows chosen value option in\r\n   * dropdown, if enabled also cancels dropdown options rerender\r\n   * @param {boolean} [options.keyboard=true] - Enables keyboard control\r\n   * @param {string} [options.modifier=false] - Additional class, e.g. BEM modifier\r\n   * @param {string} [options.placeholder=false] - Autocomplete input placeholder\r\n   * @param {Function} [options.showCallback=false] - Fires after dropdown opens\r\n   * @param {number || string} [options.transition=100] - jQuery slideUp/Down speed\r\n   */\r\n  function CustomSelect(options) {\r\n    $(this).each(function () {\r\n      let $select = $(this);\r\n      let optionsArray = [];\r\n\r\n      const defaults = {\r\n        autocomplete: false,\r\n        block: 'custom-select',\r\n        hideCallback: false,\r\n        includeValue: false,\r\n        keyboard: true,\r\n        modifier: false,\r\n        placeholder: false,\r\n        showCallback: false,\r\n        transition: 100\r\n      };\r\n\r\n      if (typeof options === 'object') {\r\n        $.extend(defaults, options);\r\n      }\r\n\r\n      $select\r\n        .hide()\r\n        .after(\r\n          `<div class=\"${defaults.block}\">\r\n             <button class=\"${defaults.block}__option ${defaults.block}__option--value\"></button>\r\n             <div class=\"${defaults.block}__dropdown\"></div>\r\n           </div>`\r\n        );\r\n\r\n      let $selectOptions = $select.find('option');\r\n\r\n      const customSelect = `.${defaults.block}`;\r\n      const customSelectActiveModifier = `${defaults.block}--active`;\r\n      const dropdownOptionHtml = `<button class=\"${defaults.block}__option\"></button>`;\r\n      const dropdownOptions = `${customSelect}__option`;\r\n\r\n      let $customSelect = $select.next(customSelect);\r\n      let $customSelectValue = $customSelect.find(`${customSelect}__option--value`);\r\n      let $dropdown = $customSelect.find(`${customSelect}__dropdown`);\r\n\r\n      if (defaults.modifier) {\r\n        $customSelect.addClass(defaults.modifier);\r\n      }\r\n\r\n      createOptionsArray();\r\n      $dropdown.html('').hide();\r\n      let $input = null;\r\n\r\n      // Add autocomplete input\r\n      if (defaults.autocomplete) {\r\n        $input = $(`<input class=\"${defaults.block}__input\">`);\r\n        if (defaults.placeholder) {\r\n          $input.attr('placeholder', defaults.placeholder);\r\n        }\r\n        $dropdown.append($input);\r\n      }\r\n\r\n      // Create custom select options\r\n      $.each(optionsArray, (i, el) => {\r\n        let cssClass = $selectOptions.eq(i).attr('class');\r\n        let $currentOption = $(dropdownOptionHtml).text(el).addClass(cssClass);\r\n\r\n        if (el === $select.find(':selected').text().trim()) {\r\n          $customSelectValue.text(el).addClass(cssClass).data('class', cssClass);\r\n          if (defaults.includeValue) {\r\n            $dropdown.append($currentOption);\r\n          }\r\n        } else {\r\n          $dropdown.append($currentOption);\r\n        }\r\n      });\r\n\r\n      setDropdownToggle();\r\n\r\n      let $dropdownOptions = $dropdown.find(dropdownOptions);\r\n      let $optionWrap = null;\r\n\r\n      if (defaults.autocomplete) {\r\n        $dropdownOptions.wrapAll(`<div class=\"${defaults.block}__option-wrap\"></div>`);\r\n        $optionWrap = $dropdown.find(`${customSelect}__option-wrap`);\r\n      }\r\n\r\n      $dropdownOptions.on('click', function (event) {\r\n        let choice = $(this).text().trim();\r\n        $customSelectValue.text(choice).removeClass($customSelectValue.data('class'));\r\n        $selectOptions.prop('selected', false);\r\n\r\n        $.each(optionsArray, (i, el) => {\r\n          if (!defaults.includeValue && el === choice) {\r\n            optionsArray.splice(i, 1);\r\n          }\r\n          $.each($selectOptions, function (i, option) {\r\n            let $option = $(option);\r\n            if ($option.text().trim() === choice) {\r\n              let cssClass = $option.attr('class');\r\n              $option.prop('selected', true);\r\n              $customSelectValue.addClass(cssClass).data('class', cssClass);\r\n            }\r\n          });\r\n        });\r\n\r\n        hideDropdown();\r\n\r\n        // Recreate custom select dropdown options\r\n        if (!defaults.includeValue) {\r\n          $.each($dropdownOptions, (i, option) => {\r\n            let $option = $(option);\r\n            $option.text(optionsArray[i]);\r\n\r\n            // Reset option class\r\n            $option.attr('class', `${defaults.block}__option`);\r\n\r\n            $.each($selectOptions, function () {\r\n              let $this = $(this);\r\n              if ($this.text().trim() === optionsArray[i]) {\r\n                $option.addClass($this.attr('class'));\r\n              }\r\n            });\r\n          });\r\n        }\r\n\r\n        createOptionsArray();\r\n        if (typeof event.originalEvent !== 'undefined') {\r\n          $select.trigger('change');\r\n        }\r\n      });\r\n\r\n      // Autocomplete\r\n      if (defaults.autocomplete) {\r\n        $input.on('focus', function () {\r\n          defaults.index = -1;\r\n          $optionWrap.scrollTop(0);\r\n        });\r\n\r\n        $input.on('keyup', function () {\r\n          let query = $input.val().trim();\r\n          if (query.length) {\r\n            setTimeout(() => {\r\n              if (query === $input.val().trim()) {\r\n                $.each($dropdownOptions, (i, option) => {\r\n                  let $option = $(option);\r\n                  let match = $option.text().trim().toLowerCase().indexOf(query.toLowerCase()) !== -1;\r\n                  $option.toggle(match);\r\n                });\r\n              }\r\n            }, 300);\r\n          } else {\r\n            $dropdownOptions.show();\r\n          }\r\n        });\r\n      }\r\n\r\n      function createOptionsArray() {\r\n        optionsArray = [];\r\n\r\n        $.each($selectOptions, (i, option) => {\r\n          let el = $(option).text().trim();\r\n          optionsArray.push(el);\r\n        });\r\n      }\r\n\r\n      function hideDropdown() {\r\n        $customSelect.removeClass(customSelectActiveModifier);\r\n        $dropdown.slideUp(defaults.transition, () => {\r\n          // Close callback\r\n          if (typeof defaults.hideCallback === 'function') {\r\n            defaults.hideCallback.call($customSelect[0]);\r\n          }\r\n        });\r\n\r\n        $(window).off('click touchstart', windowEventHandler);\r\n        $customSelectValue.off('click');\r\n        setDropdownToggle();\r\n\r\n        if (defaults.keyboard) {\r\n          $dropdownOptions.blur();\r\n          $(window).off('keydown', keyboardHandler);\r\n        }\r\n\r\n        // Clear autocomplete\r\n        if (defaults.autocomplete) {\r\n          $dropdownOptions.show();\r\n          $input.val('');\r\n          $optionWrap.scrollTop(0);\r\n        }\r\n      }\r\n\r\n      function setDropdownToggle() {\r\n        $customSelectValue.one('click', () => {\r\n          const windowEvent = 'ontouchstart' in document.documentElement ? 'touchstart' : 'click';\r\n\r\n          $customSelect.addClass(customSelectActiveModifier);\r\n          $dropdown.slideDown(defaults.transition, () => {\r\n            // Open callback\r\n            if (typeof defaults.showCallback === 'function') {\r\n              defaults.showCallback.call($customSelect[0]);\r\n            }\r\n          });\r\n\r\n          $(window).on(windowEvent, windowEventHandler);\r\n          $customSelectValue.one('click', () => {\r\n            hideDropdown();\r\n          });\r\n\r\n          if (defaults.keyboard) {\r\n            defaults.index = -1;\r\n            $(window).on('keydown', keyboardHandler);\r\n          }\r\n        });\r\n      }\r\n\r\n      function windowEventHandler(event) {\r\n        let $target = $(event.target);\r\n        if (!$target.parents().is($customSelect) && !$target.is($customSelect)) {\r\n          hideDropdown();\r\n        }\r\n      }\r\n\r\n      function keyboardHandler(event) {\r\n        let visibleOptions = dropdownOptions + ':visible';\r\n\r\n        switch (event.keyCode) {\r\n          // Down\r\n          case 40:\r\n            event.preventDefault();\r\n            if ($dropdown.find(visibleOptions).eq(defaults.index + 1).length !== 0) {\r\n              defaults.index += 1;\r\n            } else {\r\n              defaults.index = 0;\r\n            }\r\n            $dropdown.find(visibleOptions).eq(defaults.index).focus();\r\n            break;\r\n          // Up\r\n          case 38:\r\n            event.preventDefault();\r\n            if ($dropdown.find(visibleOptions).eq(defaults.index - 1).length !== 0 && defaults.index - 1 >= 0) {\r\n              defaults.index -= 1;\r\n            } else {\r\n              defaults.index = $dropdown.find(visibleOptions).length - 1;\r\n            }\r\n            $dropdown.find(visibleOptions).eq(defaults.index).focus();\r\n            break;\r\n          // Enter\r\n          case 13:\r\n          // Space\r\n          case 32:\r\n            if (!$input || !$input.is(':focus')) {\r\n              event.preventDefault();\r\n              $(dropdownOptions + ':focus').trigger('click');\r\n              $select.trigger('change');\r\n              $customSelectValue.focus();\r\n            }\r\n            break;\r\n          // Esc\r\n          case 27:\r\n            event.preventDefault();\r\n            hideDropdown();\r\n            $customSelectValue.focus();\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  $.fn['customSelect'] = CustomSelect;\r\n\r\n})($);\r\n\r\nexport default CustomSelect;\r\n"]}